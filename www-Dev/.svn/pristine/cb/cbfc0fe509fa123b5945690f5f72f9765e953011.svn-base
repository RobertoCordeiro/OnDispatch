'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5448
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("BridgesDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class BridgesDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableBridgesDataSetTable As BridgesDataSetTableDataTable
    
    Private tablespGetInvoiceSingleByInvoiceID As spGetInvoiceSingleByInvoiceIDDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BridgesDataSetTable")) Is Nothing) Then
                MyBase.Tables.Add(New BridgesDataSetTableDataTable(ds.Tables("BridgesDataSetTable")))
            End If
            If (Not (ds.Tables("spGetInvoiceSingleByInvoiceID")) Is Nothing) Then
                MyBase.Tables.Add(New spGetInvoiceSingleByInvoiceIDDataTable(ds.Tables("spGetInvoiceSingleByInvoiceID")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BridgesDataSetTable() As BridgesDataSetTableDataTable
        Get
            Return Me.tableBridgesDataSetTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property spGetInvoiceSingleByInvoiceID() As spGetInvoiceSingleByInvoiceIDDataTable
        Get
            Return Me.tablespGetInvoiceSingleByInvoiceID
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As BridgesDataSet = CType(MyBase.Clone,BridgesDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("BridgesDataSetTable")) Is Nothing) Then
                MyBase.Tables.Add(New BridgesDataSetTableDataTable(ds.Tables("BridgesDataSetTable")))
            End If
            If (Not (ds.Tables("spGetInvoiceSingleByInvoiceID")) Is Nothing) Then
                MyBase.Tables.Add(New spGetInvoiceSingleByInvoiceIDDataTable(ds.Tables("spGetInvoiceSingleByInvoiceID")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableBridgesDataSetTable = CType(MyBase.Tables("BridgesDataSetTable"),BridgesDataSetTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBridgesDataSetTable) Is Nothing) Then
                Me.tableBridgesDataSetTable.InitVars
            End If
        End If
        Me.tablespGetInvoiceSingleByInvoiceID = CType(MyBase.Tables("spGetInvoiceSingleByInvoiceID"),spGetInvoiceSingleByInvoiceIDDataTable)
        If (initTable = true) Then
            If (Not (Me.tablespGetInvoiceSingleByInvoiceID) Is Nothing) Then
                Me.tablespGetInvoiceSingleByInvoiceID.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "BridgesDataSet"
        Me.Prefix = ""
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableBridgesDataSetTable = New BridgesDataSetTableDataTable
        MyBase.Tables.Add(Me.tableBridgesDataSetTable)
        Me.tablespGetInvoiceSingleByInvoiceID = New spGetInvoiceSingleByInvoiceIDDataTable
        MyBase.Tables.Add(Me.tablespGetInvoiceSingleByInvoiceID)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBridgesDataSetTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializespGetInvoiceSingleByInvoiceID() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As BridgesDataSet = New BridgesDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub BridgesDataSetTableRowChangeEventHandler(ByVal sender As Object, ByVal e As BridgesDataSetTableRowChangeEvent)
    
    Public Delegate Sub spGetInvoiceSingleByInvoiceIDRowChangeEventHandler(ByVal sender As Object, ByVal e As spGetInvoiceSingleByInvoiceIDRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BridgesDataSetTableDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTicketID As Global.System.Data.DataColumn
        
        Private columnCompany As Global.System.Data.DataColumn
        
        Private columnCustomerNumber As Global.System.Data.DataColumn
        
        Private columnCustomerPO As Global.System.Data.DataColumn
        
        Private columnServiceType As Global.System.Data.DataColumn
        
        Private columnCloseDate As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnServiceName As Global.System.Data.DataColumn
        
        Private columnLaborAmount As Global.System.Data.DataColumn
        
        Private columnAdjustCharge As Global.System.Data.DataColumn
        
        Private columnPartAmount As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BridgesDataSetTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TicketIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTicketID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ServiceTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnServiceType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CloseDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCloseDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ServiceNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnServiceName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LaborAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLaborAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdjustChargeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdjustCharge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PartAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BridgesDataSetTableRow
            Get
                Return CType(Me.Rows(index),BridgesDataSetTableRow)
            End Get
        End Property
        
        Public Event BridgesDataSetTableRowChanging As BridgesDataSetTableRowChangeEventHandler
        
        Public Event BridgesDataSetTableRowChanged As BridgesDataSetTableRowChangeEventHandler
        
        Public Event BridgesDataSetTableRowDeleting As BridgesDataSetTableRowChangeEventHandler
        
        Public Event BridgesDataSetTableRowDeleted As BridgesDataSetTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBridgesDataSetTableRow(ByVal row As BridgesDataSetTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBridgesDataSetTableRow(ByVal Company As String, ByVal CustomerNumber As String, ByVal CustomerPO As String, ByVal ServiceType As String, ByVal CloseDate As Date, ByVal Status As String, ByVal ServiceName As String, ByVal LaborAmount As Decimal, ByVal AdjustCharge As Decimal, ByVal PartAmount As Decimal, ByVal Total As Decimal) As BridgesDataSetTableRow
            Dim rowBridgesDataSetTableRow As BridgesDataSetTableRow = CType(Me.NewRow,BridgesDataSetTableRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Company, CustomerNumber, CustomerPO, ServiceType, CloseDate, Status, ServiceName, LaborAmount, AdjustCharge, PartAmount, Total}
            rowBridgesDataSetTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBridgesDataSetTableRow)
            Return rowBridgesDataSetTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BridgesDataSetTableDataTable = CType(MyBase.Clone,BridgesDataSetTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BridgesDataSetTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTicketID = MyBase.Columns("TicketID")
            Me.columnCompany = MyBase.Columns("Company")
            Me.columnCustomerNumber = MyBase.Columns("CustomerNumber")
            Me.columnCustomerPO = MyBase.Columns("CustomerPO")
            Me.columnServiceType = MyBase.Columns("ServiceType")
            Me.columnCloseDate = MyBase.Columns("CloseDate")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnServiceName = MyBase.Columns("ServiceName")
            Me.columnLaborAmount = MyBase.Columns("LaborAmount")
            Me.columnAdjustCharge = MyBase.Columns("AdjustCharge")
            Me.columnPartAmount = MyBase.Columns("PartAmount")
            Me.columnTotal = MyBase.Columns("Total")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTicketID = New Global.System.Data.DataColumn("TicketID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTicketID)
            Me.columnCompany = New Global.System.Data.DataColumn("Company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompany)
            Me.columnCustomerNumber = New Global.System.Data.DataColumn("CustomerNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerNumber)
            Me.columnCustomerPO = New Global.System.Data.DataColumn("CustomerPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerPO)
            Me.columnServiceType = New Global.System.Data.DataColumn("ServiceType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnServiceType)
            Me.columnCloseDate = New Global.System.Data.DataColumn("CloseDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCloseDate)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnServiceName = New Global.System.Data.DataColumn("ServiceName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnServiceName)
            Me.columnLaborAmount = New Global.System.Data.DataColumn("LaborAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLaborAmount)
            Me.columnAdjustCharge = New Global.System.Data.DataColumn("AdjustCharge", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdjustCharge)
            Me.columnPartAmount = New Global.System.Data.DataColumn("PartAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartAmount)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnTicketID.AutoIncrement = true
            Me.columnTicketID.AllowDBNull = false
            Me.columnTicketID.ReadOnly = true
            Me.columnCompany.MaxLength = 128
            Me.columnCustomerNumber.MaxLength = 255
            Me.columnCustomerPO.MaxLength = 255
            Me.columnServiceType.AllowDBNull = false
            Me.columnServiceType.MaxLength = 32
            Me.columnCloseDate.ReadOnly = true
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.MaxLength = 64
            Me.columnServiceName.AllowDBNull = false
            Me.columnServiceName.MaxLength = 32
            Me.columnLaborAmount.ReadOnly = true
            Me.columnAdjustCharge.AllowDBNull = false
            Me.columnPartAmount.ReadOnly = true
            Me.columnTotal.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBridgesDataSetTableRow() As BridgesDataSetTableRow
            Return CType(Me.NewRow,BridgesDataSetTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BridgesDataSetTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BridgesDataSetTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BridgesDataSetTableRowChangedEvent) Is Nothing) Then
                RaiseEvent BridgesDataSetTableRowChanged(Me, New BridgesDataSetTableRowChangeEvent(CType(e.Row,BridgesDataSetTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BridgesDataSetTableRowChangingEvent) Is Nothing) Then
                RaiseEvent BridgesDataSetTableRowChanging(Me, New BridgesDataSetTableRowChangeEvent(CType(e.Row,BridgesDataSetTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BridgesDataSetTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent BridgesDataSetTableRowDeleted(Me, New BridgesDataSetTableRowChangeEvent(CType(e.Row,BridgesDataSetTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BridgesDataSetTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent BridgesDataSetTableRowDeleting(Me, New BridgesDataSetTableRowChangeEvent(CType(e.Row,BridgesDataSetTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBridgesDataSetTableRow(ByVal row As BridgesDataSetTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As BridgesDataSet = New BridgesDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BridgesDataSetTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class spGetInvoiceSingleByInvoiceIDDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnInvoiceID As Global.System.Data.DataColumn
        
        Private columnCustomerID As Global.System.Data.DataColumn
        
        Private columnCreatedBy As Global.System.Data.DataColumn
        
        Private columnInternalDescription As Global.System.Data.DataColumn
        
        Private columnBillName As Global.System.Data.DataColumn
        
        Private columnBillCompany As Global.System.Data.DataColumn
        
        Private columnBillStreet As Global.System.Data.DataColumn
        
        Private columnBillExtended As Global.System.Data.DataColumn
        
        Private columnBillCity As Global.System.Data.DataColumn
        
        Private columnBillState As Global.System.Data.DataColumn
        
        Private columnBillZipCode As Global.System.Data.DataColumn
        
        Private columnShipName As Global.System.Data.DataColumn
        
        Private columnShipCompany As Global.System.Data.DataColumn
        
        Private columnShipStreet As Global.System.Data.DataColumn
        
        Private columnShipExtended As Global.System.Data.DataColumn
        
        Private columnShipCity As Global.System.Data.DataColumn
        
        Private columnShipState As Global.System.Data.DataColumn
        
        Private columnShipZipCode As Global.System.Data.DataColumn
        
        Private columnNotes As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnDateCreated As Global.System.Data.DataColumn
        
        Private columnPaid As Global.System.Data.DataColumn
        
        Private columnInvoiceNumber As Global.System.Data.DataColumn
        
        Private columnIsVendorPayment As Global.System.Data.DataColumn
        
        Private columnPartnerID As Global.System.Data.DataColumn
        
        Private columnWorkOrderID As Global.System.Data.DataColumn
        
        Private columnCreatedBy1 As Global.System.Data.DataColumn
        
        Private columnPartnerAddressID As Global.System.Data.DataColumn
        
        Private columnPartnerID1 As Global.System.Data.DataColumn
        
        Private columnPartnerAgentID As Global.System.Data.DataColumn
        
        Private columnWorkOrderStatusID As Global.System.Data.DataColumn
        
        Private columnServiceID As Global.System.Data.DataColumn
        
        Private columnTicketID As Global.System.Data.DataColumn
        
        Private columnWorkOrderFileID As Global.System.Data.DataColumn
        
        Private columnIncrementTypeID As Global.System.Data.DataColumn
        
        Private columnClosingAgent As Global.System.Data.DataColumn
        
        Private columnMileageStart As Global.System.Data.DataColumn
        
        Private columnMileageEnd As Global.System.Data.DataColumn
        
        Private columnTimeOnHold As Global.System.Data.DataColumn
        
        Private columnTravelTime As Global.System.Data.DataColumn
        
        Private columnSurveyEmail As Global.System.Data.DataColumn
        
        Private columnTechSupportAgentName As Global.System.Data.DataColumn
        
        Private columnResolutionNote As Global.System.Data.DataColumn
        
        Private columnMinimumPay As Global.System.Data.DataColumn
        
        Private columnMaximumPay As Global.System.Data.DataColumn
        
        Private columnPayRate As Global.System.Data.DataColumn
        
        Private columnAdjustPay As Global.System.Data.DataColumn
        
        Private columnSurveyAuthorized As Global.System.Data.DataColumn
        
        Private columnPayable As Global.System.Data.DataColumn
        
        Private columnClosedFromSite As Global.System.Data.DataColumn
        
        Private columnResolved As Global.System.Data.DataColumn
        
        Private columnDateClosed As Global.System.Data.DataColumn
        
        Private columnDispatchDate As Global.System.Data.DataColumn
        
        Private columnArrived As Global.System.Data.DataColumn
        
        Private columnDeparted As Global.System.Data.DataColumn
        
        Private columnDateCreated1 As Global.System.Data.DataColumn
        
        Private columnInvoiced As Global.System.Data.DataColumn
        
        Private columnInvoiceAmount As Global.System.Data.DataColumn
        
        Private columnInvoiceExtraAmount As Global.System.Data.DataColumn
        
        Private columnInvoiceDate As Global.System.Data.DataColumn
        
        Private columnInvoicePaidDate As Global.System.Data.DataColumn
        
        Private columnInvoicePaidOnCheckNumber As Global.System.Data.DataColumn
        
        Private columnVendorPaid As Global.System.Data.DataColumn
        
        Private columnVendorPaidAmount As Global.System.Data.DataColumn
        
        Private columnVendorExtraAmount As Global.System.Data.DataColumn
        
        Private columnVendorPaidDate As Global.System.Data.DataColumn
        
        Private columnVendorPaidOnCheckNumber As Global.System.Data.DataColumn
        
        Private columnVendorPayNotes As Global.System.Data.DataColumn
        
        Private columnInvoiceNotes As Global.System.Data.DataColumn
        
        Private columnInvoicePaidAmount As Global.System.Data.DataColumn
        
        Private columnBillable As Global.System.Data.DataColumn
        
        Private columnTripChargeTypeID As Global.System.Data.DataColumn
        
        Private columnInvoiceID1 As Global.System.Data.DataColumn
        
        Private columnReferenceNumber1 As Global.System.Data.DataColumn
        
        Private columnReferenceNumber2 As Global.System.Data.DataColumn
        
        Private columnTicketID1 As Global.System.Data.DataColumn
        
        Private columnCompany As Global.System.Data.DataColumn
        
        Private columnCustomerNumber As Global.System.Data.DataColumn
        
        Private columnCustomerPO As Global.System.Data.DataColumn
        
        Private columnServiceType As Global.System.Data.DataColumn
        
        Private columnLaborAmount As Global.System.Data.DataColumn
        
        Private columnCloseDate As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnServiceName As Global.System.Data.DataColumn
        
        Private columnAdjustCharge As Global.System.Data.DataColumn
        
        Private columnPartAmount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "spGetInvoiceSingleByInvoiceID"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InternalDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInternalDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillCompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillCompany
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillStreetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillStreet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillExtendedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillExtended
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillCityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillZipCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillZipCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipCompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipCompany
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipStreetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipStreet
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipExtendedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipExtended
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipCityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipZipCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipZipCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateCreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsVendorPaymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsVendorPayment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PartnerIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartnerID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WorkOrderIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkOrderID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedBy1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedBy1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PartnerAddressIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartnerAddressID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PartnerID1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartnerID1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PartnerAgentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartnerAgentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WorkOrderStatusIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkOrderStatusID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ServiceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnServiceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TicketIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTicketID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WorkOrderFileIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkOrderFileID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IncrementTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIncrementTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClosingAgentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClosingAgent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MileageStartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMileageStart
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MileageEndColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMileageEnd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TimeOnHoldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTimeOnHold
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TravelTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTravelTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyEmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TechSupportAgentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTechSupportAgentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResolutionNoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResolutionNote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinimumPayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinimumPay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaximumPayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaximumPay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdjustPayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdjustPay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyAuthorizedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyAuthorized
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayable
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClosedFromSiteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClosedFromSite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResolvedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResolved
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateClosedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateClosed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DispatchDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDispatchDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArrivedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArrived
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeparted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateCreated1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateCreated1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoicedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiced
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceExtraAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceExtraAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoicePaidDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoicePaidDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoicePaidOnCheckNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoicePaidOnCheckNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendorPaidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendorPaid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendorPaidAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendorPaidAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendorExtraAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendorExtraAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendorPaidDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendorPaidDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendorPaidOnCheckNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendorPaidOnCheckNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendorPayNotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendorPayNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceNotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoicePaidAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoicePaidAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillable
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TripChargeTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTripChargeTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceID1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceID1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenceNumber1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferenceNumber1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenceNumber2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferenceNumber2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TicketID1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTicketID1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompanyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ServiceTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnServiceType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LaborAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLaborAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CloseDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCloseDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ServiceNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnServiceName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdjustChargeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdjustCharge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PartAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPartAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As spGetInvoiceSingleByInvoiceIDRow
            Get
                Return CType(Me.Rows(index),spGetInvoiceSingleByInvoiceIDRow)
            End Get
        End Property
        
        Public Event spGetInvoiceSingleByInvoiceIDRowChanging As spGetInvoiceSingleByInvoiceIDRowChangeEventHandler
        
        Public Event spGetInvoiceSingleByInvoiceIDRowChanged As spGetInvoiceSingleByInvoiceIDRowChangeEventHandler
        
        Public Event spGetInvoiceSingleByInvoiceIDRowDeleting As spGetInvoiceSingleByInvoiceIDRowChangeEventHandler
        
        Public Event spGetInvoiceSingleByInvoiceIDRowDeleted As spGetInvoiceSingleByInvoiceIDRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddspGetInvoiceSingleByInvoiceIDRow(ByVal row As spGetInvoiceSingleByInvoiceIDRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddspGetInvoiceSingleByInvoiceIDRow( _
                    ByVal CustomerID As Integer,  _
                    ByVal CreatedBy As Integer,  _
                    ByVal InternalDescription As String,  _
                    ByVal BillName As String,  _
                    ByVal BillCompany As String,  _
                    ByVal BillStreet As String,  _
                    ByVal BillExtended As String,  _
                    ByVal BillCity As String,  _
                    ByVal BillState As String,  _
                    ByVal BillZipCode As String,  _
                    ByVal ShipName As String,  _
                    ByVal ShipCompany As String,  _
                    ByVal ShipStreet As String,  _
                    ByVal ShipExtended As String,  _
                    ByVal ShipCity As String,  _
                    ByVal ShipState As String,  _
                    ByVal ShipZipCode As String,  _
                    ByVal Notes As String,  _
                    ByVal Total As Decimal,  _
                    ByVal DateCreated As Date,  _
                    ByVal Paid As Boolean,  _
                    ByVal InvoiceNumber As String,  _
                    ByVal IsVendorPayment As Boolean,  _
                    ByVal PartnerID As Integer,  _
                    ByVal CreatedBy1 As Integer,  _
                    ByVal PartnerAddressID As Integer,  _
                    ByVal PartnerID1 As Integer,  _
                    ByVal PartnerAgentID As Integer,  _
                    ByVal WorkOrderStatusID As Integer,  _
                    ByVal ServiceID As Integer,  _
                    ByVal TicketID As Integer,  _
                    ByVal WorkOrderFileID As Integer,  _
                    ByVal IncrementTypeID As Integer,  _
                    ByVal ClosingAgent As Integer,  _
                    ByVal MileageStart As Integer,  _
                    ByVal MileageEnd As Integer,  _
                    ByVal TimeOnHold As Integer,  _
                    ByVal TravelTime As Integer,  _
                    ByVal SurveyEmail As String,  _
                    ByVal TechSupportAgentName As String,  _
                    ByVal ResolutionNote As String,  _
                    ByVal MinimumPay As Short,  _
                    ByVal MaximumPay As Decimal,  _
                    ByVal PayRate As Decimal,  _
                    ByVal AdjustPay As Decimal,  _
                    ByVal SurveyAuthorized As Boolean,  _
                    ByVal Payable As Boolean,  _
                    ByVal ClosedFromSite As Boolean,  _
                    ByVal Resolved As Boolean,  _
                    ByVal DateClosed As Date,  _
                    ByVal DispatchDate As Date,  _
                    ByVal Arrived As Date,  _
                    ByVal Departed As Date,  _
                    ByVal DateCreated1 As Date,  _
                    ByVal Invoiced As Boolean,  _
                    ByVal InvoiceAmount As Double,  _
                    ByVal InvoiceExtraAmount As Double,  _
                    ByVal InvoiceDate As Date,  _
                    ByVal InvoicePaidDate As Date,  _
                    ByVal InvoicePaidOnCheckNumber As String,  _
                    ByVal VendorPaid As Boolean,  _
                    ByVal VendorPaidAmount As Double,  _
                    ByVal VendorExtraAmount As Double,  _
                    ByVal VendorPaidDate As Date,  _
                    ByVal VendorPaidOnCheckNumber As String,  _
                    ByVal VendorPayNotes As String,  _
                    ByVal InvoiceNotes As String,  _
                    ByVal InvoicePaidAmount As Double,  _
                    ByVal Billable As Boolean,  _
                    ByVal TripChargeTypeID As Integer,  _
                    ByVal InvoiceID1 As Integer,  _
                    ByVal ReferenceNumber1 As String,  _
                    ByVal ReferenceNumber2 As String,  _
                    ByVal Company As String,  _
                    ByVal CustomerNumber As String,  _
                    ByVal CustomerPO As String,  _
                    ByVal ServiceType As String,  _
                    ByVal LaborAmount As Decimal,  _
                    ByVal CloseDate As Date,  _
                    ByVal Status As String,  _
                    ByVal ServiceName As String,  _
                    ByVal AdjustCharge As Decimal,  _
                    ByVal PartAmount As Decimal) As spGetInvoiceSingleByInvoiceIDRow
            Dim rowspGetInvoiceSingleByInvoiceIDRow As spGetInvoiceSingleByInvoiceIDRow = CType(Me.NewRow,spGetInvoiceSingleByInvoiceIDRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CustomerID, CreatedBy, InternalDescription, BillName, BillCompany, BillStreet, BillExtended, BillCity, BillState, BillZipCode, ShipName, ShipCompany, ShipStreet, ShipExtended, ShipCity, ShipState, ShipZipCode, Notes, Total, DateCreated, Paid, InvoiceNumber, IsVendorPayment, PartnerID, Nothing, CreatedBy1, PartnerAddressID, PartnerID1, PartnerAgentID, WorkOrderStatusID, ServiceID, TicketID, WorkOrderFileID, IncrementTypeID, ClosingAgent, MileageStart, MileageEnd, TimeOnHold, TravelTime, SurveyEmail, TechSupportAgentName, ResolutionNote, MinimumPay, MaximumPay, PayRate, AdjustPay, SurveyAuthorized, Payable, ClosedFromSite, Resolved, DateClosed, DispatchDate, Arrived, Departed, DateCreated1, Invoiced, InvoiceAmount, InvoiceExtraAmount, InvoiceDate, InvoicePaidDate, InvoicePaidOnCheckNumber, VendorPaid, VendorPaidAmount, VendorExtraAmount, VendorPaidDate, VendorPaidOnCheckNumber, VendorPayNotes, InvoiceNotes, InvoicePaidAmount, Billable, TripChargeTypeID, InvoiceID1, ReferenceNumber1, ReferenceNumber2, Nothing, Company, CustomerNumber, CustomerPO, ServiceType, LaborAmount, CloseDate, Status, ServiceName, AdjustCharge, PartAmount}
            rowspGetInvoiceSingleByInvoiceIDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowspGetInvoiceSingleByInvoiceIDRow)
            Return rowspGetInvoiceSingleByInvoiceIDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As spGetInvoiceSingleByInvoiceIDDataTable = CType(MyBase.Clone,spGetInvoiceSingleByInvoiceIDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New spGetInvoiceSingleByInvoiceIDDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnInvoiceID = MyBase.Columns("InvoiceID")
            Me.columnCustomerID = MyBase.Columns("CustomerID")
            Me.columnCreatedBy = MyBase.Columns("CreatedBy")
            Me.columnInternalDescription = MyBase.Columns("InternalDescription")
            Me.columnBillName = MyBase.Columns("BillName")
            Me.columnBillCompany = MyBase.Columns("BillCompany")
            Me.columnBillStreet = MyBase.Columns("BillStreet")
            Me.columnBillExtended = MyBase.Columns("BillExtended")
            Me.columnBillCity = MyBase.Columns("BillCity")
            Me.columnBillState = MyBase.Columns("BillState")
            Me.columnBillZipCode = MyBase.Columns("BillZipCode")
            Me.columnShipName = MyBase.Columns("ShipName")
            Me.columnShipCompany = MyBase.Columns("ShipCompany")
            Me.columnShipStreet = MyBase.Columns("ShipStreet")
            Me.columnShipExtended = MyBase.Columns("ShipExtended")
            Me.columnShipCity = MyBase.Columns("ShipCity")
            Me.columnShipState = MyBase.Columns("ShipState")
            Me.columnShipZipCode = MyBase.Columns("ShipZipCode")
            Me.columnNotes = MyBase.Columns("Notes")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnDateCreated = MyBase.Columns("DateCreated")
            Me.columnPaid = MyBase.Columns("Paid")
            Me.columnInvoiceNumber = MyBase.Columns("InvoiceNumber")
            Me.columnIsVendorPayment = MyBase.Columns("IsVendorPayment")
            Me.columnPartnerID = MyBase.Columns("PartnerID")
            Me.columnWorkOrderID = MyBase.Columns("WorkOrderID")
            Me.columnCreatedBy1 = MyBase.Columns("CreatedBy1")
            Me.columnPartnerAddressID = MyBase.Columns("PartnerAddressID")
            Me.columnPartnerID1 = MyBase.Columns("PartnerID1")
            Me.columnPartnerAgentID = MyBase.Columns("PartnerAgentID")
            Me.columnWorkOrderStatusID = MyBase.Columns("WorkOrderStatusID")
            Me.columnServiceID = MyBase.Columns("ServiceID")
            Me.columnTicketID = MyBase.Columns("TicketID")
            Me.columnWorkOrderFileID = MyBase.Columns("WorkOrderFileID")
            Me.columnIncrementTypeID = MyBase.Columns("IncrementTypeID")
            Me.columnClosingAgent = MyBase.Columns("ClosingAgent")
            Me.columnMileageStart = MyBase.Columns("MileageStart")
            Me.columnMileageEnd = MyBase.Columns("MileageEnd")
            Me.columnTimeOnHold = MyBase.Columns("TimeOnHold")
            Me.columnTravelTime = MyBase.Columns("TravelTime")
            Me.columnSurveyEmail = MyBase.Columns("SurveyEmail")
            Me.columnTechSupportAgentName = MyBase.Columns("TechSupportAgentName")
            Me.columnResolutionNote = MyBase.Columns("ResolutionNote")
            Me.columnMinimumPay = MyBase.Columns("MinimumPay")
            Me.columnMaximumPay = MyBase.Columns("MaximumPay")
            Me.columnPayRate = MyBase.Columns("PayRate")
            Me.columnAdjustPay = MyBase.Columns("AdjustPay")
            Me.columnSurveyAuthorized = MyBase.Columns("SurveyAuthorized")
            Me.columnPayable = MyBase.Columns("Payable")
            Me.columnClosedFromSite = MyBase.Columns("ClosedFromSite")
            Me.columnResolved = MyBase.Columns("Resolved")
            Me.columnDateClosed = MyBase.Columns("DateClosed")
            Me.columnDispatchDate = MyBase.Columns("DispatchDate")
            Me.columnArrived = MyBase.Columns("Arrived")
            Me.columnDeparted = MyBase.Columns("Departed")
            Me.columnDateCreated1 = MyBase.Columns("DateCreated1")
            Me.columnInvoiced = MyBase.Columns("Invoiced")
            Me.columnInvoiceAmount = MyBase.Columns("InvoiceAmount")
            Me.columnInvoiceExtraAmount = MyBase.Columns("InvoiceExtraAmount")
            Me.columnInvoiceDate = MyBase.Columns("InvoiceDate")
            Me.columnInvoicePaidDate = MyBase.Columns("InvoicePaidDate")
            Me.columnInvoicePaidOnCheckNumber = MyBase.Columns("InvoicePaidOnCheckNumber")
            Me.columnVendorPaid = MyBase.Columns("VendorPaid")
            Me.columnVendorPaidAmount = MyBase.Columns("VendorPaidAmount")
            Me.columnVendorExtraAmount = MyBase.Columns("VendorExtraAmount")
            Me.columnVendorPaidDate = MyBase.Columns("VendorPaidDate")
            Me.columnVendorPaidOnCheckNumber = MyBase.Columns("VendorPaidOnCheckNumber")
            Me.columnVendorPayNotes = MyBase.Columns("VendorPayNotes")
            Me.columnInvoiceNotes = MyBase.Columns("InvoiceNotes")
            Me.columnInvoicePaidAmount = MyBase.Columns("InvoicePaidAmount")
            Me.columnBillable = MyBase.Columns("Billable")
            Me.columnTripChargeTypeID = MyBase.Columns("TripChargeTypeID")
            Me.columnInvoiceID1 = MyBase.Columns("InvoiceID1")
            Me.columnReferenceNumber1 = MyBase.Columns("ReferenceNumber1")
            Me.columnReferenceNumber2 = MyBase.Columns("ReferenceNumber2")
            Me.columnTicketID1 = MyBase.Columns("TicketID1")
            Me.columnCompany = MyBase.Columns("Company")
            Me.columnCustomerNumber = MyBase.Columns("CustomerNumber")
            Me.columnCustomerPO = MyBase.Columns("CustomerPO")
            Me.columnServiceType = MyBase.Columns("ServiceType")
            Me.columnLaborAmount = MyBase.Columns("LaborAmount")
            Me.columnCloseDate = MyBase.Columns("CloseDate")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnServiceName = MyBase.Columns("ServiceName")
            Me.columnAdjustCharge = MyBase.Columns("AdjustCharge")
            Me.columnPartAmount = MyBase.Columns("PartAmount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnInvoiceID = New Global.System.Data.DataColumn("InvoiceID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceID)
            Me.columnCustomerID = New Global.System.Data.DataColumn("CustomerID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerID)
            Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedBy)
            Me.columnInternalDescription = New Global.System.Data.DataColumn("InternalDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInternalDescription)
            Me.columnBillName = New Global.System.Data.DataColumn("BillName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillName)
            Me.columnBillCompany = New Global.System.Data.DataColumn("BillCompany", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillCompany)
            Me.columnBillStreet = New Global.System.Data.DataColumn("BillStreet", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillStreet)
            Me.columnBillExtended = New Global.System.Data.DataColumn("BillExtended", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillExtended)
            Me.columnBillCity = New Global.System.Data.DataColumn("BillCity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillCity)
            Me.columnBillState = New Global.System.Data.DataColumn("BillState", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillState)
            Me.columnBillZipCode = New Global.System.Data.DataColumn("BillZipCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillZipCode)
            Me.columnShipName = New Global.System.Data.DataColumn("ShipName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipName)
            Me.columnShipCompany = New Global.System.Data.DataColumn("ShipCompany", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipCompany)
            Me.columnShipStreet = New Global.System.Data.DataColumn("ShipStreet", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipStreet)
            Me.columnShipExtended = New Global.System.Data.DataColumn("ShipExtended", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipExtended)
            Me.columnShipCity = New Global.System.Data.DataColumn("ShipCity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipCity)
            Me.columnShipState = New Global.System.Data.DataColumn("ShipState", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipState)
            Me.columnShipZipCode = New Global.System.Data.DataColumn("ShipZipCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipZipCode)
            Me.columnNotes = New Global.System.Data.DataColumn("Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotes)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnDateCreated = New Global.System.Data.DataColumn("DateCreated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateCreated)
            Me.columnPaid = New Global.System.Data.DataColumn("Paid", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaid)
            Me.columnInvoiceNumber = New Global.System.Data.DataColumn("InvoiceNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceNumber)
            Me.columnIsVendorPayment = New Global.System.Data.DataColumn("IsVendorPayment", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsVendorPayment)
            Me.columnPartnerID = New Global.System.Data.DataColumn("PartnerID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartnerID)
            Me.columnWorkOrderID = New Global.System.Data.DataColumn("WorkOrderID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkOrderID)
            Me.columnCreatedBy1 = New Global.System.Data.DataColumn("CreatedBy1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedBy1)
            Me.columnPartnerAddressID = New Global.System.Data.DataColumn("PartnerAddressID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartnerAddressID)
            Me.columnPartnerID1 = New Global.System.Data.DataColumn("PartnerID1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartnerID1)
            Me.columnPartnerAgentID = New Global.System.Data.DataColumn("PartnerAgentID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartnerAgentID)
            Me.columnWorkOrderStatusID = New Global.System.Data.DataColumn("WorkOrderStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkOrderStatusID)
            Me.columnServiceID = New Global.System.Data.DataColumn("ServiceID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnServiceID)
            Me.columnTicketID = New Global.System.Data.DataColumn("TicketID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTicketID)
            Me.columnWorkOrderFileID = New Global.System.Data.DataColumn("WorkOrderFileID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkOrderFileID)
            Me.columnIncrementTypeID = New Global.System.Data.DataColumn("IncrementTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIncrementTypeID)
            Me.columnClosingAgent = New Global.System.Data.DataColumn("ClosingAgent", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClosingAgent)
            Me.columnMileageStart = New Global.System.Data.DataColumn("MileageStart", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMileageStart)
            Me.columnMileageEnd = New Global.System.Data.DataColumn("MileageEnd", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMileageEnd)
            Me.columnTimeOnHold = New Global.System.Data.DataColumn("TimeOnHold", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTimeOnHold)
            Me.columnTravelTime = New Global.System.Data.DataColumn("TravelTime", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTravelTime)
            Me.columnSurveyEmail = New Global.System.Data.DataColumn("SurveyEmail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyEmail)
            Me.columnTechSupportAgentName = New Global.System.Data.DataColumn("TechSupportAgentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTechSupportAgentName)
            Me.columnResolutionNote = New Global.System.Data.DataColumn("ResolutionNote", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResolutionNote)
            Me.columnMinimumPay = New Global.System.Data.DataColumn("MinimumPay", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinimumPay)
            Me.columnMaximumPay = New Global.System.Data.DataColumn("MaximumPay", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaximumPay)
            Me.columnPayRate = New Global.System.Data.DataColumn("PayRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayRate)
            Me.columnAdjustPay = New Global.System.Data.DataColumn("AdjustPay", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdjustPay)
            Me.columnSurveyAuthorized = New Global.System.Data.DataColumn("SurveyAuthorized", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyAuthorized)
            Me.columnPayable = New Global.System.Data.DataColumn("Payable", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayable)
            Me.columnClosedFromSite = New Global.System.Data.DataColumn("ClosedFromSite", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClosedFromSite)
            Me.columnResolved = New Global.System.Data.DataColumn("Resolved", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResolved)
            Me.columnDateClosed = New Global.System.Data.DataColumn("DateClosed", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateClosed)
            Me.columnDispatchDate = New Global.System.Data.DataColumn("DispatchDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDispatchDate)
            Me.columnArrived = New Global.System.Data.DataColumn("Arrived", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArrived)
            Me.columnDeparted = New Global.System.Data.DataColumn("Departed", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeparted)
            Me.columnDateCreated1 = New Global.System.Data.DataColumn("DateCreated1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateCreated1)
            Me.columnInvoiced = New Global.System.Data.DataColumn("Invoiced", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiced)
            Me.columnInvoiceAmount = New Global.System.Data.DataColumn("InvoiceAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceAmount)
            Me.columnInvoiceExtraAmount = New Global.System.Data.DataColumn("InvoiceExtraAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceExtraAmount)
            Me.columnInvoiceDate = New Global.System.Data.DataColumn("InvoiceDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceDate)
            Me.columnInvoicePaidDate = New Global.System.Data.DataColumn("InvoicePaidDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoicePaidDate)
            Me.columnInvoicePaidOnCheckNumber = New Global.System.Data.DataColumn("InvoicePaidOnCheckNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoicePaidOnCheckNumber)
            Me.columnVendorPaid = New Global.System.Data.DataColumn("VendorPaid", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendorPaid)
            Me.columnVendorPaidAmount = New Global.System.Data.DataColumn("VendorPaidAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendorPaidAmount)
            Me.columnVendorExtraAmount = New Global.System.Data.DataColumn("VendorExtraAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendorExtraAmount)
            Me.columnVendorPaidDate = New Global.System.Data.DataColumn("VendorPaidDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendorPaidDate)
            Me.columnVendorPaidOnCheckNumber = New Global.System.Data.DataColumn("VendorPaidOnCheckNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendorPaidOnCheckNumber)
            Me.columnVendorPayNotes = New Global.System.Data.DataColumn("VendorPayNotes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendorPayNotes)
            Me.columnInvoiceNotes = New Global.System.Data.DataColumn("InvoiceNotes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceNotes)
            Me.columnInvoicePaidAmount = New Global.System.Data.DataColumn("InvoicePaidAmount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoicePaidAmount)
            Me.columnBillable = New Global.System.Data.DataColumn("Billable", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillable)
            Me.columnTripChargeTypeID = New Global.System.Data.DataColumn("TripChargeTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTripChargeTypeID)
            Me.columnInvoiceID1 = New Global.System.Data.DataColumn("InvoiceID1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceID1)
            Me.columnReferenceNumber1 = New Global.System.Data.DataColumn("ReferenceNumber1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferenceNumber1)
            Me.columnReferenceNumber2 = New Global.System.Data.DataColumn("ReferenceNumber2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferenceNumber2)
            Me.columnTicketID1 = New Global.System.Data.DataColumn("TicketID1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTicketID1)
            Me.columnCompany = New Global.System.Data.DataColumn("Company", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompany)
            Me.columnCustomerNumber = New Global.System.Data.DataColumn("CustomerNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerNumber)
            Me.columnCustomerPO = New Global.System.Data.DataColumn("CustomerPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerPO)
            Me.columnServiceType = New Global.System.Data.DataColumn("ServiceType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnServiceType)
            Me.columnLaborAmount = New Global.System.Data.DataColumn("LaborAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLaborAmount)
            Me.columnCloseDate = New Global.System.Data.DataColumn("CloseDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCloseDate)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnServiceName = New Global.System.Data.DataColumn("ServiceName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnServiceName)
            Me.columnAdjustCharge = New Global.System.Data.DataColumn("AdjustCharge", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdjustCharge)
            Me.columnPartAmount = New Global.System.Data.DataColumn("PartAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPartAmount)
            Me.columnInvoiceID.AutoIncrement = true
            Me.columnInvoiceID.AllowDBNull = false
            Me.columnInvoiceID.ReadOnly = true
            Me.columnCustomerID.AllowDBNull = false
            Me.columnCreatedBy.AllowDBNull = false
            Me.columnInternalDescription.MaxLength = 128
            Me.columnBillName.MaxLength = 192
            Me.columnBillCompany.MaxLength = 128
            Me.columnBillStreet.MaxLength = 255
            Me.columnBillExtended.MaxLength = 255
            Me.columnBillCity.MaxLength = 128
            Me.columnBillState.MaxLength = 32
            Me.columnBillZipCode.MaxLength = 16
            Me.columnShipName.MaxLength = 192
            Me.columnShipCompany.MaxLength = 128
            Me.columnShipStreet.MaxLength = 255
            Me.columnShipExtended.MaxLength = 255
            Me.columnShipCity.MaxLength = 128
            Me.columnShipState.MaxLength = 32
            Me.columnShipZipCode.MaxLength = 16
            Me.columnNotes.MaxLength = 2147483647
            Me.columnTotal.ReadOnly = true
            Me.columnDateCreated.AllowDBNull = false
            Me.columnPaid.ReadOnly = true
            Me.columnInvoiceNumber.MaxLength = 16
            Me.columnWorkOrderID.AutoIncrement = true
            Me.columnWorkOrderID.AllowDBNull = false
            Me.columnWorkOrderID.ReadOnly = true
            Me.columnCreatedBy1.AllowDBNull = false
            Me.columnWorkOrderStatusID.AllowDBNull = false
            Me.columnServiceID.AllowDBNull = false
            Me.columnTicketID.AllowDBNull = false
            Me.columnIncrementTypeID.AllowDBNull = false
            Me.columnMileageStart.AllowDBNull = false
            Me.columnMileageEnd.AllowDBNull = false
            Me.columnTimeOnHold.AllowDBNull = false
            Me.columnTravelTime.AllowDBNull = false
            Me.columnSurveyEmail.MaxLength = 255
            Me.columnTechSupportAgentName.MaxLength = 255
            Me.columnResolutionNote.MaxLength = 2147483647
            Me.columnMinimumPay.AllowDBNull = false
            Me.columnMaximumPay.AllowDBNull = false
            Me.columnPayRate.AllowDBNull = false
            Me.columnAdjustPay.AllowDBNull = false
            Me.columnSurveyAuthorized.AllowDBNull = false
            Me.columnPayable.AllowDBNull = false
            Me.columnClosedFromSite.AllowDBNull = false
            Me.columnResolved.AllowDBNull = false
            Me.columnDateCreated1.AllowDBNull = false
            Me.columnInvoicePaidOnCheckNumber.MaxLength = 50
            Me.columnVendorPaidOnCheckNumber.MaxLength = 50
            Me.columnVendorPayNotes.MaxLength = 2147483647
            Me.columnInvoiceNotes.MaxLength = 2147483647
            Me.columnReferenceNumber1.MaxLength = 255
            Me.columnReferenceNumber2.MaxLength = 255
            Me.columnTicketID1.AutoIncrement = true
            Me.columnTicketID1.AllowDBNull = false
            Me.columnTicketID1.ReadOnly = true
            Me.columnCompany.MaxLength = 128
            Me.columnCustomerNumber.MaxLength = 255
            Me.columnCustomerPO.MaxLength = 255
            Me.columnServiceType.AllowDBNull = false
            Me.columnServiceType.MaxLength = 32
            Me.columnLaborAmount.ReadOnly = true
            Me.columnCloseDate.ReadOnly = true
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.MaxLength = 64
            Me.columnServiceName.AllowDBNull = false
            Me.columnServiceName.MaxLength = 32
            Me.columnAdjustCharge.AllowDBNull = false
            Me.columnPartAmount.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewspGetInvoiceSingleByInvoiceIDRow() As spGetInvoiceSingleByInvoiceIDRow
            Return CType(Me.NewRow,spGetInvoiceSingleByInvoiceIDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New spGetInvoiceSingleByInvoiceIDRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(spGetInvoiceSingleByInvoiceIDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.spGetInvoiceSingleByInvoiceIDRowChangedEvent) Is Nothing) Then
                RaiseEvent spGetInvoiceSingleByInvoiceIDRowChanged(Me, New spGetInvoiceSingleByInvoiceIDRowChangeEvent(CType(e.Row,spGetInvoiceSingleByInvoiceIDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.spGetInvoiceSingleByInvoiceIDRowChangingEvent) Is Nothing) Then
                RaiseEvent spGetInvoiceSingleByInvoiceIDRowChanging(Me, New spGetInvoiceSingleByInvoiceIDRowChangeEvent(CType(e.Row,spGetInvoiceSingleByInvoiceIDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.spGetInvoiceSingleByInvoiceIDRowDeletedEvent) Is Nothing) Then
                RaiseEvent spGetInvoiceSingleByInvoiceIDRowDeleted(Me, New spGetInvoiceSingleByInvoiceIDRowChangeEvent(CType(e.Row,spGetInvoiceSingleByInvoiceIDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.spGetInvoiceSingleByInvoiceIDRowDeletingEvent) Is Nothing) Then
                RaiseEvent spGetInvoiceSingleByInvoiceIDRowDeleting(Me, New spGetInvoiceSingleByInvoiceIDRowChangeEvent(CType(e.Row,spGetInvoiceSingleByInvoiceIDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovespGetInvoiceSingleByInvoiceIDRow(ByVal row As spGetInvoiceSingleByInvoiceIDRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As BridgesDataSet = New BridgesDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "spGetInvoiceSingleByInvoiceIDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BridgesDataSetTableRow
        Inherits Global.System.Data.DataRow
        
        Private tableBridgesDataSetTable As BridgesDataSetTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBridgesDataSetTable = CType(Me.Table,BridgesDataSetTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TicketID() As Integer
            Get
                Return CType(Me(Me.tableBridgesDataSetTable.TicketIDColumn),Integer)
            End Get
            Set
                Me(Me.tableBridgesDataSetTable.TicketIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Company() As String
            Get
                Try 
                    Return CType(Me(Me.tableBridgesDataSetTable.CompanyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Company' in table 'BridgesDataSetTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBridgesDataSetTable.CompanyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomerNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableBridgesDataSetTable.CustomerNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerNumber' in table 'BridgesDataSetTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBridgesDataSetTable.CustomerNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomerPO() As String
            Get
                Try 
                    Return CType(Me(Me.tableBridgesDataSetTable.CustomerPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerPO' in table 'BridgesDataSetTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBridgesDataSetTable.CustomerPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ServiceType() As String
            Get
                Return CType(Me(Me.tableBridgesDataSetTable.ServiceTypeColumn),String)
            End Get
            Set
                Me(Me.tableBridgesDataSetTable.ServiceTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CloseDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableBridgesDataSetTable.CloseDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CloseDate' in table 'BridgesDataSetTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBridgesDataSetTable.CloseDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Return CType(Me(Me.tableBridgesDataSetTable.StatusColumn),String)
            End Get
            Set
                Me(Me.tableBridgesDataSetTable.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ServiceName() As String
            Get
                Return CType(Me(Me.tableBridgesDataSetTable.ServiceNameColumn),String)
            End Get
            Set
                Me(Me.tableBridgesDataSetTable.ServiceNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LaborAmount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBridgesDataSetTable.LaborAmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LaborAmount' in table 'BridgesDataSetTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBridgesDataSetTable.LaborAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdjustCharge() As Decimal
            Get
                Return CType(Me(Me.tableBridgesDataSetTable.AdjustChargeColumn),Decimal)
            End Get
            Set
                Me(Me.tableBridgesDataSetTable.AdjustChargeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PartAmount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBridgesDataSetTable.PartAmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PartAmount' in table 'BridgesDataSetTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBridgesDataSetTable.PartAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBridgesDataSetTable.TotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total' in table 'BridgesDataSetTable' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBridgesDataSetTable.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me.tableBridgesDataSetTable.CompanyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyNull()
            Me(Me.tableBridgesDataSetTable.CompanyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerNumberNull() As Boolean
            Return Me.IsNull(Me.tableBridgesDataSetTable.CustomerNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerNumberNull()
            Me(Me.tableBridgesDataSetTable.CustomerNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerPONull() As Boolean
            Return Me.IsNull(Me.tableBridgesDataSetTable.CustomerPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerPONull()
            Me(Me.tableBridgesDataSetTable.CustomerPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCloseDateNull() As Boolean
            Return Me.IsNull(Me.tableBridgesDataSetTable.CloseDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCloseDateNull()
            Me(Me.tableBridgesDataSetTable.CloseDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLaborAmountNull() As Boolean
            Return Me.IsNull(Me.tableBridgesDataSetTable.LaborAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLaborAmountNull()
            Me(Me.tableBridgesDataSetTable.LaborAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPartAmountNull() As Boolean
            Return Me.IsNull(Me.tableBridgesDataSetTable.PartAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPartAmountNull()
            Me(Me.tableBridgesDataSetTable.PartAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableBridgesDataSetTable.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tableBridgesDataSetTable.TotalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class spGetInvoiceSingleByInvoiceIDRow
        Inherits Global.System.Data.DataRow
        
        Private tablespGetInvoiceSingleByInvoiceID As spGetInvoiceSingleByInvoiceIDDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablespGetInvoiceSingleByInvoiceID = CType(Me.Table,spGetInvoiceSingleByInvoiceIDDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceID() As Integer
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceIDColumn),Integer)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomerID() As Integer
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.CustomerIDColumn),Integer)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.CustomerIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedBy() As Integer
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.CreatedByColumn),Integer)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.CreatedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InternalDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.InternalDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InternalDescription' in table 'spGetInvoiceSingleByInvoiceI"& _ 
                            "D' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.InternalDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillName() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.BillNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillName' in table 'spGetInvoiceSingleByInvoiceID' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.BillNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillCompany() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.BillCompanyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillCompany' in table 'spGetInvoiceSingleByInvoiceID' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.BillCompanyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillStreet() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.BillStreetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillStreet' in table 'spGetInvoiceSingleByInvoiceID' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.BillStreetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillExtended() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.BillExtendedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillExtended' in table 'spGetInvoiceSingleByInvoiceID' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.BillExtendedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillCity() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.BillCityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillCity' in table 'spGetInvoiceSingleByInvoiceID' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.BillCityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillState() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.BillStateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillState' in table 'spGetInvoiceSingleByInvoiceID' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.BillStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillZipCode() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.BillZipCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillZipCode' in table 'spGetInvoiceSingleByInvoiceID' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.BillZipCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipName() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipName' in table 'spGetInvoiceSingleByInvoiceID' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipCompany() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipCompanyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipCompany' in table 'spGetInvoiceSingleByInvoiceID' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipCompanyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipStreet() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipStreetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipStreet' in table 'spGetInvoiceSingleByInvoiceID' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipStreetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipExtended() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipExtendedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipExtended' in table 'spGetInvoiceSingleByInvoiceID' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipExtendedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipCity() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipCityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipCity' in table 'spGetInvoiceSingleByInvoiceID' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipCityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipState() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipStateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipState' in table 'spGetInvoiceSingleByInvoiceID' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipZipCode() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipZipCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipZipCode' in table 'spGetInvoiceSingleByInvoiceID' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipZipCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Notes' in table 'spGetInvoiceSingleByInvoiceID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.TotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Total' in table 'spGetInvoiceSingleByInvoiceID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateCreated() As Date
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.DateCreatedColumn),Date)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.DateCreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Paid() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.PaidColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Paid' in table 'spGetInvoiceSingleByInvoiceID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.PaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceNumber' in table 'spGetInvoiceSingleByInvoiceID' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsVendorPayment() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.IsVendorPaymentColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsVendorPayment' in table 'spGetInvoiceSingleByInvoiceID' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.IsVendorPaymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PartnerID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.PartnerIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PartnerID' in table 'spGetInvoiceSingleByInvoiceID' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.PartnerIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WorkOrderID() As Integer
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.WorkOrderIDColumn),Integer)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.WorkOrderIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedBy1() As Integer
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.CreatedBy1Column),Integer)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.CreatedBy1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PartnerAddressID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.PartnerAddressIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PartnerAddressID' in table 'spGetInvoiceSingleByInvoiceID' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.PartnerAddressIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PartnerID1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.PartnerID1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PartnerID1' in table 'spGetInvoiceSingleByInvoiceID' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.PartnerID1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PartnerAgentID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.PartnerAgentIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PartnerAgentID' in table 'spGetInvoiceSingleByInvoiceID' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.PartnerAgentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WorkOrderStatusID() As Integer
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.WorkOrderStatusIDColumn),Integer)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.WorkOrderStatusIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ServiceID() As Integer
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.ServiceIDColumn),Integer)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.ServiceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TicketID() As Integer
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.TicketIDColumn),Integer)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.TicketIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WorkOrderFileID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.WorkOrderFileIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WorkOrderFileID' in table 'spGetInvoiceSingleByInvoiceID' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.WorkOrderFileIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IncrementTypeID() As Integer
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.IncrementTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.IncrementTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClosingAgent() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.ClosingAgentColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClosingAgent' in table 'spGetInvoiceSingleByInvoiceID' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.ClosingAgentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MileageStart() As Integer
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.MileageStartColumn),Integer)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.MileageStartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MileageEnd() As Integer
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.MileageEndColumn),Integer)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.MileageEndColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TimeOnHold() As Integer
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.TimeOnHoldColumn),Integer)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.TimeOnHoldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TravelTime() As Integer
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.TravelTimeColumn),Integer)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.TravelTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyEmail() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.SurveyEmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SurveyEmail' in table 'spGetInvoiceSingleByInvoiceID' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.SurveyEmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TechSupportAgentName() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.TechSupportAgentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TechSupportAgentName' in table 'spGetInvoiceSingleByInvoice"& _ 
                            "ID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.TechSupportAgentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResolutionNote() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.ResolutionNoteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ResolutionNote' in table 'spGetInvoiceSingleByInvoiceID' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.ResolutionNoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MinimumPay() As Short
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.MinimumPayColumn),Short)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.MinimumPayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaximumPay() As Decimal
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.MaximumPayColumn),Decimal)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.MaximumPayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PayRate() As Decimal
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.PayRateColumn),Decimal)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.PayRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdjustPay() As Decimal
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.AdjustPayColumn),Decimal)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.AdjustPayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyAuthorized() As Boolean
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.SurveyAuthorizedColumn),Boolean)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.SurveyAuthorizedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Payable() As Boolean
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.PayableColumn),Boolean)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.PayableColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClosedFromSite() As Boolean
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.ClosedFromSiteColumn),Boolean)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.ClosedFromSiteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Resolved() As Boolean
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.ResolvedColumn),Boolean)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.ResolvedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateClosed() As Date
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.DateClosedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateClosed' in table 'spGetInvoiceSingleByInvoiceID' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.DateClosedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DispatchDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.DispatchDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DispatchDate' in table 'spGetInvoiceSingleByInvoiceID' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.DispatchDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Arrived() As Date
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.ArrivedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Arrived' in table 'spGetInvoiceSingleByInvoiceID' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.ArrivedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Departed() As Date
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.DepartedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Departed' in table 'spGetInvoiceSingleByInvoiceID' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.DepartedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateCreated1() As Date
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.DateCreated1Column),Date)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.DateCreated1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Invoiced() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoicedColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Invoiced' in table 'spGetInvoiceSingleByInvoiceID' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoicedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceAmount' in table 'spGetInvoiceSingleByInvoiceID' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceExtraAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceExtraAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceExtraAmount' in table 'spGetInvoiceSingleByInvoiceID"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceExtraAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceDate' in table 'spGetInvoiceSingleByInvoiceID' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoicePaidDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoicePaidDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoicePaidDate' in table 'spGetInvoiceSingleByInvoiceID' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoicePaidDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoicePaidOnCheckNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoicePaidOnCheckNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoicePaidOnCheckNumber' in table 'spGetInvoiceSingleByInv"& _ 
                            "oiceID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoicePaidOnCheckNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VendorPaid() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorPaidColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VendorPaid' in table 'spGetInvoiceSingleByInvoiceID' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorPaidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VendorPaidAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorPaidAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VendorPaidAmount' in table 'spGetInvoiceSingleByInvoiceID' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorPaidAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VendorExtraAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorExtraAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VendorExtraAmount' in table 'spGetInvoiceSingleByInvoiceID'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorExtraAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VendorPaidDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorPaidDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VendorPaidDate' in table 'spGetInvoiceSingleByInvoiceID' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorPaidDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VendorPaidOnCheckNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorPaidOnCheckNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VendorPaidOnCheckNumber' in table 'spGetInvoiceSingleByInvo"& _ 
                            "iceID' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorPaidOnCheckNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VendorPayNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorPayNotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VendorPayNotes' in table 'spGetInvoiceSingleByInvoiceID' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorPayNotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceNotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceNotes' in table 'spGetInvoiceSingleByInvoiceID' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceNotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoicePaidAmount() As Double
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoicePaidAmountColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoicePaidAmount' in table 'spGetInvoiceSingleByInvoiceID'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoicePaidAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Billable() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.BillableColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Billable' in table 'spGetInvoiceSingleByInvoiceID' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.BillableColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TripChargeTypeID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.TripChargeTypeIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TripChargeTypeID' in table 'spGetInvoiceSingleByInvoiceID' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.TripChargeTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceID1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceID1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvoiceID1' in table 'spGetInvoiceSingleByInvoiceID' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceID1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReferenceNumber1() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.ReferenceNumber1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReferenceNumber1' in table 'spGetInvoiceSingleByInvoiceID' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.ReferenceNumber1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReferenceNumber2() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.ReferenceNumber2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReferenceNumber2' in table 'spGetInvoiceSingleByInvoiceID' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.ReferenceNumber2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TicketID1() As Integer
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.TicketID1Column),Integer)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.TicketID1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Company() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.CompanyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Company' in table 'spGetInvoiceSingleByInvoiceID' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.CompanyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomerNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.CustomerNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerNumber' in table 'spGetInvoiceSingleByInvoiceID' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.CustomerNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomerPO() As String
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.CustomerPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomerPO' in table 'spGetInvoiceSingleByInvoiceID' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.CustomerPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ServiceType() As String
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.ServiceTypeColumn),String)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.ServiceTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LaborAmount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.LaborAmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LaborAmount' in table 'spGetInvoiceSingleByInvoiceID' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.LaborAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CloseDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.CloseDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CloseDate' in table 'spGetInvoiceSingleByInvoiceID' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.CloseDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.StatusColumn),String)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ServiceName() As String
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.ServiceNameColumn),String)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.ServiceNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdjustCharge() As Decimal
            Get
                Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.AdjustChargeColumn),Decimal)
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.AdjustChargeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PartAmount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablespGetInvoiceSingleByInvoiceID.PartAmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PartAmount' in table 'spGetInvoiceSingleByInvoiceID' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablespGetInvoiceSingleByInvoiceID.PartAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInternalDescriptionNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.InternalDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInternalDescriptionNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.InternalDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillNameNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.BillNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillNameNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.BillNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillCompanyNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.BillCompanyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillCompanyNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.BillCompanyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillStreetNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.BillStreetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillStreetNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.BillStreetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillExtendedNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.BillExtendedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillExtendedNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.BillExtendedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillCityNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.BillCityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillCityNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.BillCityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillStateNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.BillStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillStateNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.BillStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillZipCodeNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.BillZipCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillZipCodeNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.BillZipCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipNameNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.ShipNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipNameNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipCompanyNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.ShipCompanyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipCompanyNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipCompanyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipStreetNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.ShipStreetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipStreetNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipStreetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipExtendedNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.ShipExtendedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipExtendedNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipExtendedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipCityNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.ShipCityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipCityNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipCityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipStateNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.ShipStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipStateNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipZipCodeNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.ShipZipCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipZipCodeNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.ShipZipCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotesNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaidNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.PaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaidNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.PaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceNumberNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceNumberNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsVendorPaymentNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.IsVendorPaymentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsVendorPaymentNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.IsVendorPaymentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPartnerIDNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.PartnerIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPartnerIDNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.PartnerIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPartnerAddressIDNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.PartnerAddressIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPartnerAddressIDNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.PartnerAddressIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPartnerID1Null() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.PartnerID1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPartnerID1Null()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.PartnerID1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPartnerAgentIDNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.PartnerAgentIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPartnerAgentIDNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.PartnerAgentIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWorkOrderFileIDNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.WorkOrderFileIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWorkOrderFileIDNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.WorkOrderFileIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClosingAgentNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.ClosingAgentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClosingAgentNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.ClosingAgentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSurveyEmailNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.SurveyEmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSurveyEmailNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.SurveyEmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTechSupportAgentNameNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.TechSupportAgentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTechSupportAgentNameNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.TechSupportAgentNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResolutionNoteNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.ResolutionNoteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResolutionNoteNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.ResolutionNoteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateClosedNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.DateClosedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateClosedNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.DateClosedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDispatchDateNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.DispatchDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDispatchDateNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.DispatchDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArrivedNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.ArrivedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArrivedNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.ArrivedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartedNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.DepartedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartedNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.DepartedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoicedNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.InvoicedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoicedNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoicedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceAmountNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceAmountNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceExtraAmountNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceExtraAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceExtraAmountNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceExtraAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceDateNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceDateNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoicePaidDateNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.InvoicePaidDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoicePaidDateNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoicePaidDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoicePaidOnCheckNumberNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.InvoicePaidOnCheckNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoicePaidOnCheckNumberNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoicePaidOnCheckNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendorPaidNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.VendorPaidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendorPaidNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorPaidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendorPaidAmountNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.VendorPaidAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendorPaidAmountNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorPaidAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendorExtraAmountNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.VendorExtraAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendorExtraAmountNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorExtraAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendorPaidDateNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.VendorPaidDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendorPaidDateNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorPaidDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendorPaidOnCheckNumberNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.VendorPaidOnCheckNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendorPaidOnCheckNumberNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorPaidOnCheckNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendorPayNotesNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.VendorPayNotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendorPayNotesNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.VendorPayNotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceNotesNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceNotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceNotesNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceNotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoicePaidAmountNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.InvoicePaidAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoicePaidAmountNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoicePaidAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillableNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.BillableColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillableNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.BillableColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTripChargeTypeIDNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.TripChargeTypeIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTripChargeTypeIDNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.TripChargeTypeIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceID1Null() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceID1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceID1Null()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.InvoiceID1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferenceNumber1Null() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.ReferenceNumber1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferenceNumber1Null()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.ReferenceNumber1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferenceNumber2Null() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.ReferenceNumber2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferenceNumber2Null()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.ReferenceNumber2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.CompanyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompanyNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.CompanyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerNumberNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.CustomerNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerNumberNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.CustomerNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerPONull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.CustomerPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerPONull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.CustomerPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLaborAmountNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.LaborAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLaborAmountNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.LaborAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCloseDateNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.CloseDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCloseDateNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.CloseDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPartAmountNull() As Boolean
            Return Me.IsNull(Me.tablespGetInvoiceSingleByInvoiceID.PartAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPartAmountNull()
            Me(Me.tablespGetInvoiceSingleByInvoiceID.PartAmountColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BridgesDataSetTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BridgesDataSetTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BridgesDataSetTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BridgesDataSetTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class spGetInvoiceSingleByInvoiceIDRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As spGetInvoiceSingleByInvoiceIDRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As spGetInvoiceSingleByInvoiceIDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As spGetInvoiceSingleByInvoiceIDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace BridgesDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class BridgesDataSetTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "BridgesDataSetTable"
            tableMapping.ColumnMappings.Add("TicketID", "TicketID")
            tableMapping.ColumnMappings.Add("Company", "Company")
            tableMapping.ColumnMappings.Add("CustomerNumber", "CustomerNumber")
            tableMapping.ColumnMappings.Add("CustomerPO", "CustomerPO")
            tableMapping.ColumnMappings.Add("ServiceType", "ServiceType")
            tableMapping.ColumnMappings.Add("CloseDate", "CloseDate")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("ServiceName", "ServiceName")
            tableMapping.ColumnMappings.Add("LaborAmount", "LaborAmount")
            tableMapping.ColumnMappings.Add("AdjustCharge", "AdjustCharge")
            tableMapping.ColumnMappings.Add("PartAmount", "PartAmount")
            tableMapping.ColumnMappings.Add("Total", "Total")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = "Data Source=10.200.101.3;Initial Catalog=Bridges;Integrated Security=False;User I"& _ 
                "D=web;Password=icdbu8;Connect Timeout=10"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "Select Distinct tblTickets.TicketID,tblCustomers.Company,tblTickets.ReferenceNumb"& _ 
                "er1 as CustomerNumber, tblTickets.ReferenceNumber2 as CustomerPO,tblServiceTypes"& _ 
                ".ServiceType, dbo.fnGetClosingDateByTicketID(tblTickets.TicketID)as CloseDate,tb"& _ 
                "lTicketStatuses.Status,tblServices.ServiceName,Sum(dbo.fnCalcCustomerAmount(tblw"& _ 
                "orkOrders.WorkOrderID)) as LaborAmount,tblTickets.AdjustCharge,dbo.fnCalcCustome"& _ 
                "rPartChargeAmount(tblTickets.ticketID) as PartAmount, (Sum(dbo.fnCalcCustomerAmo"& _ 
                "unt(tblworkOrders.WorkOrderID))+ tblTickets.AdjustCharge + dbo.fnCalcCustomerPar"& _ 
                "tChargeAmount(tblTickets.ticketID)) as Total"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from tblTickets"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Inner Join tblWor"& _ 
                "kOrders On tblWorkOrders.TicketID = tblTickets.TicketID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Inner Join tblCustomers"& _ 
                " On tblCustomers.CustomerID = tblTickets.CustomerID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Inner Join tblTicketStatuse"& _ 
                "s on tblTickets.TicketStatusID = tblTicketStatuses.TicketStatusID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Inner Join tb"& _ 
                "lServices on tblTickets.ServiceID = tblServices.ServiceID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"inner join tblService"& _ 
                "Types on tblServices.ServiceTypeID = tblServiceTypes.ServiceTypeID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Inner Join t"& _ 
                "blInvoices On tblTickets.InvoiceID = tblInvoices.InvoiceID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where tblTickets.Inv"& _ 
                "oiceID = 108"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Group By tblTIckets.TIcketID,tblCustomers.Company,tblTickets.Ref"& _ 
                "erenceNumber1,tblTickets.ReferenceNumber2,tblServiceTypes.ServiceType,tblTicketS"& _ 
                "tatuses.Status,tblServices.ServiceName,tblTickets.AdjustCharge"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As BridgesDataSet.BridgesDataSetTableDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As BridgesDataSet.BridgesDataSetTableDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As BridgesDataSet.BridgesDataSetTableDataTable = New BridgesDataSet.BridgesDataSetTableDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
